{"version":3,"sources":["pdf/PdfContainer.js"],"names":["pdfMake","vfs","pdfFonts","PdfContainer","props","useState","JSON","stringify","initialPdfCode","code","setCode","ReactGA","event","category","action","label","packageJson","version","createPdf","getDataUrl","dataUrl","setPdfUrl","pdfUrl","useEffect","propCodeFormated","parse","e","console","log","id","title","src","frameBorder"],"mappings":"oMAOAA,IAAQC,IAAMC,IAASF,QAAQC,IAwChBE,UAtCM,SAACC,GAAW,IAAD,EACNC,mBAASC,KAAKC,UAAUC,IAAgB,KAAM,IADxC,mBACvBC,EADuB,KACjBC,EADiB,OAEFL,oBAAS,WACnCM,IAAQC,MAAM,CACZC,SAAU,iBACVC,OAAQ,yBACRC,MAAM,eAAD,OAAiBC,EAAYC,WAGZjB,IAAQkB,UAAUV,KAC1BW,YAAW,SAACC,GAC1BC,EAAUD,SAXgB,mBAEvBE,EAFuB,KAEfD,EAFe,KA+B9B,OAhBAE,qBAAU,WACR,IAAMC,EAAmBpB,EAAMK,KAC/BC,EAAQc,GAER,IACE,GAAIf,IAASe,EACaxB,IAAQkB,UAAUZ,KAAKmB,MAAMrB,EAAMK,OAC3CU,YAAW,SAACC,GAC1BC,EAAUD,MAGd,MAAOM,GACPC,QAAQC,IAAIF,MAEb,CAACtB,EAAMK,KAAMA,IAGd,qBAAKoB,GAAG,uBAAR,SACE,wBAAQA,GAAG,uBAAuBC,MAAM,aAAaC,IAAKT,EAAQU,YAAa","file":"static/js/5.36b1f744.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactGA from 'react-ga';\nimport pdfMake from 'pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\nimport { initialPdfCode } from '../app.config';\nimport packageJson from '../../package.json';\n\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nconst PdfContainer = (props) => {\n  const [code, setCode] = useState(JSON.stringify(initialPdfCode, null, 2));\n  const [pdfUrl, setPdfUrl] = useState(() => {\n    ReactGA.event({\n      category: 'Generating PDF',\n      action: 'Generating initial PDF',\n      label: `App version ${packageJson.version}`,\n    });\n\n    const pdfDocGenerator = pdfMake.createPdf(initialPdfCode);\n    pdfDocGenerator.getDataUrl((dataUrl) => {\n      setPdfUrl(dataUrl);\n    });\n  });\n\n  useEffect(() => {\n    const propCodeFormated = props.code;\n    setCode(propCodeFormated);\n\n    try {\n      if (code !== propCodeFormated) {\n        const pdfDocGenerator = pdfMake.createPdf(JSON.parse(props.code));\n        pdfDocGenerator.getDataUrl((dataUrl) => {\n          setPdfUrl(dataUrl);\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [props.code, code]);\n\n  return (\n    <div id='PdfContainer__edited'>\n      <iframe id='PdfContainer__iframe' title='pdf-iframe' src={pdfUrl} frameBorder={0} />\n    </div>\n  );\n};\n\nexport default PdfContainer;\n"],"sourceRoot":""}